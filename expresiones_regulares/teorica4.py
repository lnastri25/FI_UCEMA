#!/bin/python3

import re

#üßó‚Äç‚ôÄÔ∏è Desaf√≠o I: ¬øConstru√≠ la expresi√≥n regular que obtenga al menos 4 d√≠gitos?

"\d{4,} "

"\w{4, }" # Construyo una expresion regular que obtenga al menos 4 palabras.

#üßó‚Äç‚ôÄÔ∏è Desaf√≠o II: ¬øConstru√≠ la expresi√≥n regular que obtenga al entre 3 y 6 letras min√∫sculas?

"[a-z]{3,6}" 

#üßó‚Äç‚ôÄÔ∏è Desaf√≠o III: ¬øConstru√≠ la expresi√≥n regular que obtenga todas las apariciones del patr√≥n ab en un string?

"ab+"

"""
# ---------- #

texto = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Amet et amet."
patron = "amet" 
print(re.search(patron,texto)) 
print(texto[22:26]) 

# ---------- #

texto = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Amet et amet."
patron = "amet"
print(re.match(patron,texto))

# El funci√≥n match() de re busca el patr√≥n y devuelve la primera aparici√≥n y solo al principio de la cadena. 
# Si se encuentra una coincidencia en la primera l√≠nea, devuelve el objeto de coincidencia. 
# Pero, si se encuentra una coincidencia en alguna otra l√≠nea, devulve un valor nulo.

# ---------- #

texto = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Amet et amet."
patron = "amet"
print(re.findall(patron, texto)) # El resultado da una lista con todas las apariciones del patron especifico de expresion regular que yo le especifiqu√©.

# ---------- #

texto = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Amet et amet."
patron = "amet"
print(re.search(patron, texto).group()) # Me junta el string del resultado que yo le pas√©, del patron que encontr√≥.
"""

# ---------- #

texto = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Amet et amet."
patron = "ipsum(.*)sit" # el punto (.) para indicar que puede ser cualquier car√°cter, y el aster√≠sco (*) para indicar que puede haber 0 o m√°s de estos caracteres. De esta manera obtenemos como resultado lo que se encuentre entre las palabras "ipsum" y "sit".
print(re.search(patron, texto), "\n")
print(re.search(patron, texto).group())
print(re.search(patron, texto).group(0))
print(re.search(patron, texto).group(1)) # Solo el resultado de la busqueda sin incluir lo que yo busqu√©.
print(re.sub(patron, "###", texto)) # Reemplaza ipsum por ###

# ---------- #

"""
    Las expresiones regulares se usan para poder hacer b√∫squedas masivas de texto con patrones en particular sin saber en la fuente en la que estoy buscando, qu√© es lo que me voy a encontrar. Se que quiero, pero no s√© qu√© hay.
        - En desarrollo web ‚Üí se usa para validaci√≥n de cosas. (por ejemplo para saber si un mail o una tarjeta, es v√°lido o no)
        - Si te queres bajar algo de un link, podes delimitar la informaci√≥n que te podes bajar con expresiones regulares

    Sirven para:
    a) Validaciones (log in, tarjetas)
    b) Web scraping
    c) Ver si alguien se copi√≥ en algun examen.

    - Para la computadora todo lo que veo se puede traducir a un car√°cter.


1) re.search(pattern, string, flags=0)

    - Examina a trav√©s de la string (¬´cadena¬ª) buscando el primer lugar donde el pattern (¬´patr√≥n¬ª) de la expresi√≥n regular produce una coincidencia, y retorna un objeto match correspondiente. Retorna None si ninguna posici√≥n en la cadena coincide con el patr√≥n; notar que esto es diferente a encontrar una coincidencia de longitud cero en alg√∫n punto de la cadena.
    - De por s√≠ no devuelve nada. Devuelve 'None' y por eso usamos bool.

2) re.match(pattern, string, flags=0) 

    - Si cero o m√°s caracteres al principio de la string (¬´cadena¬ª) coinciden con el pattern (¬´patr√≥n¬ª) de la expresi√≥n regular, retorna un objeto match correspondiente. Retorna None si la cadena no coincide con el patr√≥n; notar que esto es diferente de una coincidencia de longitud cero.

3) re.split(pattern, string, maxsplit=0, flags=0)

    - Divide la string (¬´cadena¬ª) por el n√∫mero de ocurrencias del pattern (¬´patr√≥n¬ª). Si se utilizan par√©ntesis de captura en pattern, entonces el texto de todos los grupos en el patr√≥n tambi√©n se retornan como parte de la lista resultante. Si maxsplit (m√°xima divisibilidad) es distinta de cero, como mucho se producen maxsplit divisiones, y el resto de la cadena se retorna como elemento final de la lista.

4) re.findall(pattern, string, flags=0)

    - Retorna todas las coincidencias no superpuestas de pattern en string, como una lista de strings o tuplas. El string se escanea de izquierda a derecha y las coincidencias se retornan en el orden en que se encuentran. Las coincidencias vac√≠as se incluyen en el resultado.
    
    - El resultado depende del n√∫mero de grupos detectados en el patr√≥n. Si no hay grupos, retorna una lista de strings que coincidan con el patr√≥n completo. Si existe exactamente un grupo, retorna una lista de strings que coincidan con ese grupo. Si hay varios grupos presentes, retorna una lista de tuplas de strings que coinciden con los grupos. Los grupos que no son detectados no afectan la forma del resultado.


# Para hacer un patr√≥n que queremos que lea m√°s de una letra --> hay que usar *^, etc porque sino los matches van a ser de solamente un caracter. 

"""

# [a-z] --> lorenzo.nastri --> me trae l
# [a-z]* --> lorenzo.nastri --> me trae lorenzo.nastri
# [a-z]+ --> lorenzo.nastri --> me trae lorenzo.nastri
# [a-z]+[.] --> lorenzo.nastri --> me trae lorenzo.

# Ejercicio MAIL: #
# r: significa que cualquier car√°cter especial contenido en la cadena se interpreta literalmente. (raw string)

# ^: indica el inicio de l√≠nea

# [a-zA-Z0-9._%+-]+: representa el nombre del usuario de la direcci√≥n de correo electr√≥nico, 
# el cual debe estar conformado por uno o m√°s caracteres alfanum√©ricos, puntos, guiones bajos, porcentajes, m√°s y guiones.

# @: se utiliza para separar el nombre del usuario de la direcci√≥n de correo electr√≥nico del dominio.

# [a-zA-Z0-9.-]+: especifica el dominio del correo electr√≥nico, puede estar conformado por uno o m√°s caracteres alfanum√©ricos, puntos y guiones.

# \.: indica que debe haber un punto.

# [a-zA-Z]{2,}: especifica la extensi√≥n de la direcci√≥n de correo electr√≥nico, la cual debe estar conformada por dos o m√°s caracteres alfab√©ticos.


"""
1) Listado de caracteres para biblioteca RE:

\n --> salto de linea.
\t --> tab o cambio de pesta√±a.
\s --> espacio.
\s+ --> que tenga un espacio o m√°s.
\S --> que no tenga un espacio.
' --> comillas simples.
" --> comillas dobles.
^ --> inicio de l√≠nea.
$ --> fin de l√≠nea.
\A --> incio de texto.
\Z --> fin de texto.
. --> coincide con cualquier caracter en una l√≠nea dada. (todo lo que tengo ac√°)
* --> cero o m√°s veces.
+ --> una o m√°s veces.
? --> cero o una vez. (puede estar o no estar)
{n} --> exactamente n veces.
{n,m} --> por lo menos n pero no m√°s de m veces.
\w --> caracter alfanumerico. (buscame palabras)
\W --> caracter no alfanumerico.
\d --> caracter numerico. (buscame numeros)
\D --> caracter no numerico.
\b --> borde de palabra.
\B --> no borde de palabra.

2) Los rangos [] se escriben entre corchetes y le dicen a la herramienta entre que buscar.
[a-z] --> busca entre a y z.
[A-Z] --> busca entre A y Z.
[0-9] --> busca entre 0 y 9.
[a-zA-Z0-9] --> busca entre a y z, A y Z y 0 y 9.

3) raw string

    - A causa de que las expresiones regulares a menudo utilizan caracteres de escape (como por ejemplo la barra invertida ), es necesario indicar que las mismas no se interpreten como tales sino como parte de la expresi√≥n regular propiamente dicha. La forma m√°s simple de hacerlo es comenzar la cadena con una letra r para indicar que la misma debe tomarse literalmente. En Python, esto se denomina un raw string.
"""